#---------------------------------------------D R U t E S   v.   0.1b-----------------------------------------
#                                 (Dual Richards' Unsaturated Equation Solver)
#
#---------------------------------------g l o b a l . c o n f ---------------------------------------------
#

RErotH

#problem dimension (1D, 2D, 3D) [integer]
#1 = 1D
#2 = 2D
#3 = 3D
# recently only 1D and 2D is implemented
2



# define mesh generator 
# 1 - internal mesh generator
# 2 - t3d mesh generator
# 3 - gmsh mesh generator
2



# maximum number of iteration of the Picard method [integer]
20

# iteration criterion for the Picard method
1e10

#integration method - degree of Gauss quadrature formulae
      #10 - 1 point formula, 
      #20 - 2 point formula
      #30 - 3 point formula
      #40 - 4 point formula
      #50 - 5 point formula
      #60 - 6 point formula
      #70 - 7 point formula
      #90 - 9 point formula (in 2-dimensions derived from 3 point formula, ask Michal Kuraz :) )
      #120 - 12 point formula
30


#-----initial dt hod - init dt [real]
 1e-6


#-----end time [real]
7
# 1
#---minimal time step [real]
1e-8
# 1
#-- maximal time step [real]
0.01130
# 1



#print level [integer]
# 0 = standard output 
# 1 = screen goes to out/screen.log
# -1 = screen goes to /dev/null, not suitable for windows 
0

#information level (nedodelano)
# 0 - default
# 1 - detailed - each iteration is displayed
# 2 - extra detailed - even each iteration of the conjugate gradient solver is displayed
0


#number of observation times
0

#observation time values [real]




#observation points
#number of observation points [integer]
# 
# 0.0230
3
#observation points coordinates
 5.0 0.0
 5.0 -1.5
 18.8 0.0
# 50.0 50.0


#define points with measured data
0
# point coordinates
# 2.0


#nonlinear iteration method
#0 - standard Picard method
#1 - Schwarz-Picard method (dd-adaptivity)
#2 - subcycling

0


#run from backup
n

# "drutes.conf/matsrv/RE_matrix_press_head-100.sci"
#/home/miguel/skola/infiltr/drutemp/out/RE_matrix_press_head-1.sci
# debugging [y/n]
y






